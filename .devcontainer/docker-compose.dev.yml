services:
    postgres:
        container_name: local-postgress
        image: postgres:13.16-bookworm
        environment:
            POSTGRES_USER: admin_pg
            POSTGRES_PASSWORD: password
            POSTGRES_DB: local-express-hybrid-auth-api-db
        ports:
            - '5433:5432'
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U admin_pg -d local-express-hybrid-auth-api-db']
            interval: 5s
            timeout: 5s
            retries: 5
            start_period: 10s

    redis:
        container_name: local-redis
        image: redis:6.0.18-alpine
        ports:
            - '6379:6379'

    migrate:
        build:
            context: ../
            dockerfile: Dockerfile
        depends_on:
            postgres:
                condition: service_healthy
        environment:
            - DATABASE_URL=postgresql://admin_pg:password@postgres:5432/local-express-hybrid-auth-api-db
            - NODE_ENV=development
        command: >
            sh -c "
              echo 'PostgreSQL is healthy, running migrations...'
              npx prisma migrate reset --force
            "
        restart: 'no'

    smtp4dev:
        container_name: local-smtp4dev
        image: rnwood/smtp4dev
        ports:
            - '5000:80' # Web UI
            - '2525:25' # SMTP server (Host 2525 -> Container 25 (SMTP))
        restart: unless-stopped
        environment:
            - Logging__LogLevel__Default=Information

    minio:
        container_name: local-minio
        image: minio/minio:latest
        ports:
            - '9000:9000' # API port
            - '9001:9001' # Console port (disabled in headless mode)
        environment:
            - MINIO_ROOT_USER=minioadmin
            - MINIO_ROOT_PASSWORD=minioadmin123
        command: server /data --console-address ":9001" # S3-compatible object storage for CDN assets
        volumes:
            - minio_data:/data # MinIO's internal data (metadata, buckets, permissions)
            - ./cdn-assets:/assets # Your static assets (mounted outside /data)
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
            interval: 30s
            timeout: 20s
            retries: 3

    minio-setup:
        container_name: local-minio-setup
        image: minio/mc:latest
        depends_on:
            minio:
                condition: service_healthy
        volumes:
            - ./cdn-assets:/assets
        entrypoint: >
            /bin/sh -c "
            mc alias set myminio http://minio:9000 minioadmin minioadmin123;
            mc mb myminio/public-assets --ignore-existing;
            mc anonymous set public myminio/public-assets;
            mc cp /assets/* myminio/public-assets/;
            echo 'MinIO setup completed successfully - bucket created and assets uploaded';
            "
        restart: 'no' # One-time setup: creates bucket and sets public permissions

volumes:
    minio_data: # Persistent storage for MinIO's internal data (buckets, permissions, metadata)
