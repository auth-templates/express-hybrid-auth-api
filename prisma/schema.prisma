generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    employee
    manager
    admin
}

enum UserStatus {
    pending
    active
    suspended
    deactivated
    deleted
}

enum TokenType {
  signup
  twofa
  password_reset
}

model users {
    id                Int              @id @default(autoincrement())
    first_name        String?           @db.VarChar(50)
    last_name         String?           @db.VarChar(50)
    email             String           @unique @db.VarChar(100)
    password_hash     String           @db.VarChar(255)
    avatar_url        String?          @db.VarChar(255)
    role              Role?            @default(employee)
    status            UserStatus       @default(pending) // Add status with default value
    created_at        DateTime?        @default(now()) @db.Timestamp(6)
    status_changed_at DateTime?    

    twofa_enabled     Boolean          @default(false)
    twofa_secret      String?          @db.VarChar(255)

    terms_accepted      Boolean            @default(false)

    verification_tokens verification_tokens[]

    accounts          accounts[] // <-- New relation for OAuth accounts
}

model accounts {
    id                Int      @id @default(autoincrement())
    user_id           Int
    provider          String   @db.VarChar(50) // e.g., 'google', 'github'
    provider_user_id  String   @db.VarChar(100) // e.g., Google or GitHub user ID
    created_at        DateTime @default(now())

    user              users    @relation(fields: [user_id], references: [id])

    @@unique([provider, provider_user_id]) // Prevent duplicate entries for same provider+user
}

model verification_tokens {
    id                Int        @id @default(autoincrement())
    user_id           Int
    token_hash        String     @db.VarChar(255) // Argon2 hashed token
    token_fingerprint String     @db.Char(64)     // SHA-256 hex fingerprint (64 characters)
    type              TokenType
    expires_at        DateTime
    used_at           DateTime? // Track when the token was used (null if not used)
    created_at        DateTime  @default(now())

    user              users     @relation(fields: [user_id], references: [id])

    @@index([token_fingerprint]) // for fast lookup
}