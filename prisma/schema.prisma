generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    employee
    manager
    admin
}

enum LeaveStatus {
    pending
    approved
    rejected
}

enum UserStatus {
    pending
    active
    suspended
    deactivated
    deleted
}

enum TokenType {
  signup
  twofa
}

model leave_balances {
    id            Int         @id @default(autoincrement())
    user_id       Int
    leave_type_id Int
    balance       Int?        @default(0)
    updated_at    DateTime?   @default(now()) @db.Timestamp(6)
    leave_types   leave_types @relation(fields: [leave_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    users         users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model leave_requests {
    id            Int         @id @default(autoincrement())
    user_id       Int
    leave_type_id Int
    start_date    DateTime    @db.Date
    end_date      DateTime    @db.Date
    status        LeaveStatus @default(pending)
    reason        String?
    created_at    DateTime?   @default(now()) @db.Timestamp(6)
    leave_types   leave_types @relation(fields: [leave_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    users         users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model leave_types {
    id             Int              @id @default(autoincrement())
    name           String           @db.VarChar(50)
    description    String?
    created_at     DateTime?        @default(now()) @db.Timestamp(6)
    leave_balances leave_balances[]
    leave_requests leave_requests[]
}

model users {
    id                Int              @id @default(autoincrement())
    first_name        String           @db.VarChar(50)
    last_name         String           @db.VarChar(50)
    email             String           @unique @db.VarChar(100)
    password_hash     String           @db.VarChar(255)
    role              Role?            @default(employee)
    status            UserStatus       @default(pending) // Add status with default value
    created_at        DateTime?        @default(now()) @db.Timestamp(6)
    status_changed_at DateTime?    

    twofa_enabled     Boolean          @default(false)
    twofa_secret      String?          @db.VarChar(255)

    leave_balances    leave_balances[]
    leave_requests    leave_requests[]
    verification_tokens verification_tokens[]
}

model verification_tokens {
  id                Int        @id @default(autoincrement())
  user_id           Int
  token_hash        String     @db.VarChar(255) // Argon2 hashed token
  token_fingerprint String     @db.Char(64)     // SHA-256 hex fingerprint (64 characters)
  type              TokenType
  expires_at        DateTime
  used_at           DateTime? // Track when the token was used (null if not used)
  created_at        DateTime  @default(now())

  user              users     @relation(fields: [user_id], references: [id])

  @@index([token_fingerprint]) // for fast lookup
}