generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  employee
  manager
  admin
}

enum LeaveStatus {
  pending
  approved
  rejected
}

model leave_balances {
  id            Int         @id @default(autoincrement())
  user_id       Int
  leave_type_id Int
  balance       Int?        @default(0)
  updated_at    DateTime?   @default(now()) @db.Timestamp(6)
  leave_types   leave_types @relation(fields: [leave_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model leave_requests {
  id            Int         @id @default(autoincrement())
  user_id       Int
  leave_type_id Int
  start_date    DateTime    @db.Date
  end_date      DateTime    @db.Date
  status        LeaveStatus @default(pending)
  reason        String?
  created_at    DateTime?   @default(now()) @db.Timestamp(6)
  leave_types   leave_types @relation(fields: [leave_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model leave_types {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(50)
  description    String?
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  leave_balances leave_balances[]
  leave_requests leave_requests[]
}

model users {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  email          String           @unique @db.VarChar(100)
  password_hash  String           @db.VarChar(255)
  role           Role?            @default(employee)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  leave_balances leave_balances[]
  leave_requests leave_requests[]
}
